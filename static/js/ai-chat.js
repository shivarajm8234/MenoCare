document.addEventListener('DOMContentLoaded', () => {
    const chatMessages = document.getElementById('chat-messages');
    const chatForm = document.getElementById('chat-form');
    const chatInput = document.getElementById('chat-input');
    const quickTopicButtons = document.querySelectorAll('.quick-topic-btn');
    const voiceButton = document.getElementById('voice-input');
    let isProcessing = false;
    let selectedLanguage = 'en-US'; // Default language

    // Available languages with their codes and names
    const languages = [
        { code: 'en-US', name: 'English (US)', flag: 'ЁЯЗ║ЁЯЗ╕' },
        { code: 'hi-IN', name: 'Hindi', flag: 'ЁЯЗоЁЯЗ│' },
        { code: 'ta-IN', name: 'Tamil', flag: 'ЁЯЗоЁЯЗ│' },
        { code: 'te-IN', name: 'Telugu', flag: 'ЁЯЗоЁЯЗ│' },
        { code: 'kn-IN', name: 'Kannada', flag: 'ЁЯЗоЁЯЗ│' },
        { code: 'ml-IN', name: 'Malayalam', flag: 'ЁЯЗоЁЯЗ│' },
        { code: 'mr-IN', name: 'Marathi', flag: 'ЁЯЗоЁЯЗ│' },
        { code: 'gu-IN', name: 'Gujarati', flag: 'ЁЯЗоЁЯЗ│' },
        { code: 'bn-IN', name: 'Bengali', flag: 'ЁЯЗоЁЯЗ│' }
    ];

    // Create language selector
    function createLanguageSelector() {
        const languageContainer = document.createElement('div');
        languageContainer.className = 'language-selector flex flex-wrap gap-2 mb-4';
        
        languages.forEach(lang => {
            const button = document.createElement('button');
            button.className = `lang-btn px-3 py-1.5 rounded-full text-sm flex items-center gap-1.5 ${
                selectedLanguage === lang.code ? 'bg-primary text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`;
            button.innerHTML = `${lang.flag} ${lang.name}`;
            button.onclick = () => {
                selectedLanguage = lang.code;
                document.querySelectorAll('.lang-btn').forEach(btn => {
                    btn.className = `lang-btn px-3 py-1.5 rounded-full text-sm flex items-center gap-1.5 ${
                        selectedLanguage === btn.dataset.code ? 'bg-primary text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`;
                });
                // Show welcome message in selected language
                appendMessage('assistant', welcomeMessages[selectedLanguage]);
            };
            button.dataset.code = lang.code;
            languageContainer.appendChild(button);
        });
        
        chatMessages.insertBefore(languageContainer, chatMessages.firstChild);
    }

    // Initialize language selector
    createLanguageSelector();

    // Function to send message to server
    async function sendMessage(message) {
        if (!message || isProcessing) return;
        
        isProcessing = true;
        appendMessage('user', message);
        appendTypingIndicator();
        
        try {
            const response = await fetch('/analyze_concerns', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    concerns: message,
                    language: selectedLanguage
                })
            });
            
            const data = await response.json();
            
            // Remove typing indicator
            removeTypingIndicator();
            
            if (data.success) {
                // Add AI response
                appendMessage('assistant', data.analysis);
                
                // Add follow-up questions if available
                if (data.follow_up_questions && data.follow_up_questions.length > 0) {
                    appendFollowUpQuestions(data.follow_up_questions);
                }
            } else {
                throw new Error(data.error || 'Failed to get response');
            }
        } catch (error) {
            console.error('Error:', error);
            appendMessage('system', 'Sorry, I encountered an error. Please try again.');
        } finally {
            isProcessing = false;
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }

    // Function to append message to chat
    function appendMessage(type, text) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type} flex items-start space-x-3 mb-4 ${type === 'user' ? 'justify-end' : ''}`;
        
        const textContainer = document.createElement('div');
        textContainer.className = `flex-grow max-w-[80%] p-3 rounded-lg ${
            type === 'user' ? 'bg-primary text-white' : 
            type === 'system' ? 'bg-red-100 text-red-700' : 
            'bg-gray-100 text-gray-800'
        }`;
        
        const formattedText = text.replace(/\n/g, '<br>');
        textContainer.innerHTML = formattedText;
        
        if (type === 'user') {
            messageDiv.appendChild(textContainer);
        } else {
            const iconContainer = document.createElement('div');
            iconContainer.className = 'flex-shrink-0 w-8 h-8 rounded-full bg-primary flex items-center justify-center';
            iconContainer.innerHTML = '<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"></path></svg>';
            
            messageDiv.appendChild(iconContainer);
            messageDiv.appendChild(textContainer);
        }
        
        chatMessages.appendChild(messageDiv);
    }

    // Function to append typing indicator
    function appendTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'typing-indicator flex items-start space-x-3 mb-4';
        typingDiv.innerHTML = `
            <div class="flex-shrink-0 w-8 h-8 rounded-full bg-primary flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"></path>
                </svg>
            </div>
            <div class="flex-grow max-w-[80%] p-3 rounded-lg bg-gray-100">
                <div class="flex space-x-2">
                    <div class="w-2 h-2 bg-gray-500 rounded-full animate-bounce"></div>
                    <div class="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                    <div class="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style="animation-delay: 0.4s"></div>
                </div>
            </div>
        `;
        chatMessages.appendChild(typingDiv);
    }

    // Function to remove typing indicator
    function removeTypingIndicator() {
        const typingIndicator = document.querySelector('.typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    // Function to append follow-up questions
    function appendFollowUpQuestions(questions) {
        const followUpContainer = document.createElement('div');
        followUpContainer.className = 'follow-up-questions mt-4 space-y-2';
        
        const followUpTitle = document.createElement('p');
        followUpTitle.className = 'text-sm text-gray-600 mb-2';
        followUpTitle.textContent = selectedLanguage.startsWith('hi-') ? 
            'рдЖрдк рдпрд╣ рднреА рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ:' : 'You might also want to ask:';
        followUpContainer.appendChild(followUpTitle);
        
        questions.forEach(question => {
            const button = document.createElement('button');
            button.className = 'follow-up-btn block w-full text-left px-4 py-2 text-sm text-primary bg-primary/5 rounded-lg hover:bg-primary hover:text-white transition-colors';
            button.textContent = question;
            button.onclick = () => {
                chatInput.value = question;
                sendMessage(question);
            };
            followUpContainer.appendChild(button);
        });
        
        chatMessages.appendChild(followUpContainer);
    }

    // Handle form submission
    chatForm.onsubmit = (e) => {
        e.preventDefault();
        const message = chatInput.value.trim();
        if (message) {
            sendMessage(message);
            chatInput.value = '';
        }
    };

    // Handle quick topic buttons
    quickTopicButtons.forEach(button => {
        button.onclick = () => {
            const topic = button.textContent.trim();
            chatInput.value = topic;
            sendMessage(topic);
        };
    });

    // Welcome messages
    const welcomeMessages = {
        'en-US': 'Welcome to MenoCare! I can help you with menstrual health, pregnancy, and menopause concerns.',
        'hi-IN': 'рдореЗрдиреЛрдХреЗрдпрд░ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдореИрдВ рдорд╛рд╕рд┐рдХ рдзрд░реНрдо рд╕реНрд╡рд╛рд╕реНрдереНрдп, рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдФрд░ рд░рдЬреЛрдирд┐рд╡реГрддреНрддрд┐ рд╕рдВрдмрдВрдзреА рдЪрд┐рдВрддрд╛рдУрдВ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддреА рд╣реВрдВред',
        'ta-IN': 'роорпЖройрпЛроХрпЗро░рпНроХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН! рооро╛родро╡ро┐роЯро╛ропрпН роЪрпБроХро╛родро╛ро░роорпН, роХро░рпНрокрпНрокроорпН рооро▒рпНро▒рпБроорпН рооро╛родро╡ро┐роЯро╛ропрпН роиро┐ро▒рпБродрпНродроорпН родрпКроЯро░рпНрокро╛рой роХро╡ро▓рпИроХро│ро┐ро▓рпН роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН.',
        'te-IN': 'р░ор▒Жр░ир▒Лр░Хр▒Зр░░р▒НтАМр░Хр░┐ р░╕р▒Нр░╡р░╛р░Чр░др░В! р░░р▒Бр░др▒Б р░Жр░░р▒Лр░Чр▒Нр░пр░В, р░Чр░░р▒Нр░нр░зр░╛р░░р░г р░ор░░р░┐р░пр▒Б р░░р░Ьр░╕р▒Нр░╡р░▓ р░╕р░ор░╕р▒Нр░пр░▓р░▓р▒Л р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б.',
        'kn-IN': 'р▓ор│Жр▓ир│Лр▓Хр│Зр▓░р│НтАМр▓Чр│Ж р▓╕р│Бр▓╕р│Нр▓╡р▓╛р▓Чр▓д! р▓ор│Бр▓Яр│Нр▓Яр▓┐р▓и р▓Жр▓░р│Лр▓Чр│Нр▓п, р▓Чр▓░р│Нр▓нр▓╛р▓╡р▓╕р│Нр▓ер│Ж р▓ор▓др│Нр▓др│Б р▓░р▓Ьр│Лр▓ир▓┐р▓╡р│Гр▓др│Нр▓др▓┐ р▓Хр▓╛р▓│р▓Ьр▓┐р▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓▓р│Нр▓▓р│Ж.',
        'ml-IN': 'р┤ор╡Жр┤ир╡Лр┤Хр╡Жр┤пр┤▒р┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В! р┤Жр╡╝р┤др╡Нр┤др┤╡ р┤Жр┤░р╡Лр┤Чр╡Нр┤пр┤В, р┤Чр╡╝р┤нр┤зр┤╛р┤░р┤гр┤В, р┤Жр╡╝р┤др╡Нр┤др┤╡р┤╡р┤┐р┤░р┤╛р┤ор┤В р┤Ор┤ир╡Нр┤ир┤┐р┤╡р┤пр╡Бр┤ор┤╛р┤пр┤┐ р┤мр┤ир╡Нр┤зр┤кр╡Нр┤кр╡Жр┤Яр╡Нр┤Я р┤Жр┤╢р┤Щр╡Нр┤Хр┤Хр┤│р┤┐р╡╜ р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Хр┤┤р┤┐р┤пр╡Бр┤В.',
        'mr-IN': 'рдореЗрдиреЛрдХреЗрдЕрд░ рдордзреНрдпреЗ рдЖрдкрд▓реЗ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ! рдореА рдорд╛рд╕рд┐рдХ рдкрд╛рд│реА рдЖрд░реЛрдЧреНрдп, рдЧрд░реНрднрдзрд╛рд░рдгрд╛ рдЖрдгрд┐ рд░рдЬреЛрдирд┐рд╡реГрддреНрддреА рд╕рдВрдмрдВрдзрд┐рдд рдЪрд┐рдВрддрд╛рдВрдордзреНрдпреЗ рдЖрдкрд▓реА рдорджрдд рдХрд░реВ рд╢рдХрддреЗ.',
        'gu-IN': 'ркорлЗркирлЛркХрлЗрк░ ркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ! рк╣рлБркВ ркорк╛рк╕рк┐ркХ ркзрк░рлНрко ркЖрк░рлЛркЧрлНркп, ркЧрк░рлНркнрк╛рк╡рк╕рлНркерк╛ ркЕркирлЗ рк░ркЬрлЛркирк┐рк╡рлГркдрлНркдрк┐ рк╕ркВркмркВркзрк┐ркд ркЪрк┐ркВркдрк╛ркУркорк╛ркВ ркЖрккркирлА ркоркжркж ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ.',
        'bn-IN': 'ржорзЗржирзЛржХрзЗржпрж╝рж╛рж░рзЗ рж╕рзНржмрж╛ржЧрждржо! ржЖржорж┐ ржорж╛рж╕рж┐ржХ рж╕рзНржмрж╛рж╕рзНржерзНржп, ржЧрж░рзНржнрж╛ржмрж╕рзНржерж╛ ржПржмржВ рж░ржЬржГржирж┐ржмрзГрждрзНрждрж┐ рж╕ржВржХрзНрж░рж╛ржирзНржд ржЙржжрзНржмрзЗржЧрзЗ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред'
    };

    // Health topics
    const healthTopics = {
        'en-US': ['Menstrual Health', 'Pregnancy Care', 'Menopause', 'Reproductive Health'],
        'hi-IN': ['рдорд╛рд╕рд┐рдХ рдзрд░реНрдо рд╕реНрд╡рд╛рд╕реНрдереНрдп', 'рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рджреЗрдЦрднрд╛рд▓', 'рд░рдЬреЛрдирд┐рд╡реГрддреНрддрд┐', 'рдкреНрд░рдЬрдирди рд╕реНрд╡рд╛рд╕реНрдереНрдп'],
        'ta-IN': ['рооро╛родро╡ро┐роЯро╛ропрпН роЪрпБроХро╛родро╛ро░роорпН', 'роХро░рпНрокрпНрокроХро╛ро▓ рокро░ро╛рооро░ро┐рокрпНрокрпБ', 'рооро╛родро╡ро┐роЯро╛ропрпН роиро┐ро▒рпБродрпНродроорпН', 'роЗройрокрпНрокрпЖро░рпБроХрпНроХ роЖро░рпЛроХрпНроХро┐ропроорпН'],
        'te-IN': ['р░░р▒Бр░др▒Б р░Жр░░р▒Лр░Чр▒Нр░пр░В', 'р░Чр░░р▒Нр░нр░зр░╛р░░р░г р░╕р░Вр░░р░Хр▒Нр░╖р░г', 'р░░р░Ьр░╕р▒Нр░╡р░▓', 'р░кр▒Нр░░р░Ьр░ир░и р░Жр░░р▒Лр░Чр▒Нр░пр░В'],
        'kn-IN': ['р▓ор│Бр▓Яр│Нр▓Яр▓┐р▓и р▓Жр▓░р│Лр▓Чр│Нр▓п', 'р▓Чр▓░р│Нр▓нр▓╛р▓╡р▓╕р│Нр▓ер│Ж р▓Жр▓░р│Ир▓Хр│Ж', 'р▓░р▓Ьр│Лр▓ир▓┐р▓╡р│Гр▓др│Нр▓др▓┐', 'р▓╕р▓Вр▓др▓╛р▓ир│Лр▓др│Нр▓кр▓др│Нр▓др▓┐ р▓Жр▓░р│Лр▓Чр│Нр▓п'],
        'ml-IN': ['р┤Жр╡╝р┤др╡Нр┤др┤╡ р┤Жр┤░р╡Лр┤Чр╡Нр┤пр┤В', 'р┤Чр╡╝р┤нр┤Хр┤╛р┤▓ р┤кр┤░р┤┐р┤Ър┤░р┤гр┤В', 'р┤Жр╡╝р┤др╡Нр┤др┤╡р┤╡р┤┐р┤░р┤╛р┤ор┤В', 'р┤кр╡Нр┤░р┤др╡Нр┤пр╡Бр╡╜р┤кр╡Нр┤кр┤╛р┤жр┤и р┤Жр┤░р╡Лр┤Чр╡Нр┤пр┤В'],
        'mr-IN': ['рдорд╛рд╕рд┐рдХ рдкрд╛рд│реА рдЖрд░реЛрдЧреНрдп', 'рдЧрд░реНрднрдзрд╛рд░рдгрд╛ рдХрд╛рд│рдЬреА', 'рд░рдЬреЛрдирд┐рд╡реГрддреНрддреА', 'рдкреНрд░рдЬрдирди рдЖрд░реЛрдЧреНрдп'],
        'gu-IN': ['ркорк╛рк╕рк┐ркХ ркзрк░рлНрко ркЖрк░рлЛркЧрлНркп', 'рк╕ркЧрк░рлНркнрк╛рк╡рк╕рлНркерк╛ рк╕ркВркнрк╛рк│', 'рк░ркЬрлЛркирк┐рк╡рлГркдрлНркдрк┐', 'рккрлНрк░ркЬркирки ркЖрк░рлЛркЧрлНркп'],
        'bn-IN': ['ржорж╛рж╕рж┐ржХ рж╕рзНржмрж╛рж╕рзНржерзНржп', 'ржЧрж░рзНржнрж╛ржмрж╕рзНржерж╛рж░ ржпрждрзНржи', 'рж░ржЬржГржирж┐ржмрзГрждрзНрждрж┐', 'ржкрзНрж░ржЬржиржи рж╕рзНржмрж╛рж╕рзНржерзНржп']
    };

    // Function to update health topics
    function updateHealthTopics(language) {
        const healthTopicContainer = document.getElementById('health-topics');
        if (healthTopicContainer) {
            healthTopicContainer.remove();
        }

        const healthTopicList = document.createElement('ul');
        healthTopicList.id = 'health-topics';
        healthTopicList.className = 'health-topics list-none m-0 p-0';

        healthTopics[language].forEach(topic => {
            const topicItem = document.createElement('li');
            topicItem.className = 'health-topic inline-block mr-4';
            topicItem.textContent = topic;
            healthTopicList.appendChild(topicItem);
        });

        chatMessages.appendChild(healthTopicList);
    }

    // Function to update quick topic buttons
    function updateQuickTopicButtons(isDisabled) {
        quickTopicButtons.forEach(button => {
            if (isDisabled) {
                button.disabled = true;
                button.className = 'quick-topic-btn disabled:opacity-50 disabled:cursor-not-allowed';
            } else {
                button.disabled = false;
                button.className = 'quick-topic-btn';
            }
        });
    }
});
